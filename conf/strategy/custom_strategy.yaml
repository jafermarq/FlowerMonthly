# A strategy that inherites from FedAvg but adds extra functionality

_target_: src.strategy.CustomFedAvg
_recursive_: true # we want everything to be instantiated
# Let's pass first (order doesn't matter) the arguments unique to our custom strategy
num_rounds: ${server.num_rounds}
eval_every_n: 5 # run global evaluation every this many rounds (will always run on the first and last round)
keep_ratio: 0.5 # this ratio of clients that participated in round N will be sampled again in round N+1
drop_ratio: 0.25 # this ratio of client updates sent back to the server will be dropped before doing aggregation
# We pass the usual arguments needed for a strategy (in this case ours inherits from FedAvg)
fraction_fit: 0.0001
fraction_evaluate: 0.0
min_fit_clients: ${server.clients_per_round}
min_available_clients: ${server.pool}
on_fit_config_fn:
  _target_: src.server.gen_fit_config # function to call eventually
  fit_cfg: ${server.fit_cfg}